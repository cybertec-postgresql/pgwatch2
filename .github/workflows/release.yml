name: Release
on:
  push:
    # ignore Dependabot branches with version strings
    # branches-ignore:
    #   - '*'  
    # run for every tag with version string
    # tags:
    #   - v[0-9]+.[0-9]+.[0-9]+*
      
jobs:

  goreleaser:
    if: false # false to skip job during debug
    runs-on: ubuntu-latest
    steps:

    - name: Set up Golang
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Unshallow
      run: git fetch --prune --unshallow

    - name: Release via goreleaser
      uses: goreleaser/goreleaser-action@master
      with:
        args: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    if: true # false to skip job during debug
    strategy:
      fail-fast: true
      matrix:
        image: ['', '-postgres', '-nonroot', '-daemon', '-db-bootstrapper']    
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Version strings
      id: version
      run: |
        echo "::set-output name=RELEASE_VERSION::$(echo "$GITHUB_REF_NAME#${GITHUB_SHA:0:6}")"
        echo "::set-output name=RELEASE_TIME::$(git show -s --format=%cI HEAD)"

    - name: Test matrix
      env:
        reponame: cybertec/pgwatch2${{ matrix.image }}
        dockerfile: docker/Dockerfile${{ matrix.image }}
      run: |
        echo "We're about to build $dockerfile and push it to the $reponame"

    # - name: Publish to Registry
    #   uses: elgohr/Publish-Docker-Github-Action@master
    #   env:
    #     GIT_HASH: ${{ steps.version.outputs.RELEASE_VERSION }}
    #     GIT_TIME: ${{ steps.version.outputs.RELEASE_TIME }}     
    #   with:
    #     name: cybertec/pgwatch2${{ matrix.image }}
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     dockerfile: docker/Dockerfile${{ matrix.image }}
    #     buildargs: GIT_HASH,GIT_TIME
    #     tag_semver: true        